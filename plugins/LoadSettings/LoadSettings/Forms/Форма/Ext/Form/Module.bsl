&НаКлиенте
Перем КонтекстЯдра;

&НаКлиенте
Перем ЭтоLinux;



// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	
	ОбъектНаСервере = ЭтотОбъектНаСервере();
    ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
    Если (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib/") и (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib\") Тогда
		Возврат ИспользуемоеИмяФайла;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКОбработке() Экспорт 
	Возврат ПолучитьПутьКОбработкеСервер();
КонецФункции


// } Plugin interface

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;

	КонтекстЯдра = КонтекстЯдраПараметр;
	ВерсияВБКлиент = КонтекстЯдраПараметр.ПолучитьВерсиюОбработкиКлиент();
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Стр) Экспорт
	Результат = Новый Структура;
	
	Массив = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Стр, ";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем, "=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем, Поз - 1);
			Значение = Сред(Элем, Поз + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				Сообщить("Не смог получить значение из строки запуска: " + Ключ);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(Элем) Тогда 
				Попытка
					Результат.Вставить(Элем, Истина);
				Исключение
					Сообщить("Не смог получить значение из строки запуска: " + Элем);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, ИмяПараметра) Экспорт
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	ИначеЕсли СтруктураПараметров.Свойство(Врег(ИмяПараметра)) Тогда 
		Возврат СтруктураПараметров[ВРег(ИмяПараметра)];
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройки(ОбъектЗагрузки) Экспорт
	
	РежимСамотестирования = ОбъектЗагрузки.РежимСамотестирования;
	Настройки = НастройкиСервер(ЭтоLinux);
	Для каждого Элемент из Настройки Цикл
		
		Если Элемент.Ключ = "ДействиеСброситьКешИзвестныхStepDefinitionСервер" И Элемент.Значение Тогда
			ОбъектЗагрузки.СброситьКешИзвестныхStepDefinition(Неопределено);
			Продолжить;
		КонецЕсли;
		
		//FIXME: ключ ОсновнойЯзык в настройке, у нас являетса реквизит ЯзыкГенератораGherkin 
		//	и он уже при восстановлении настроек должен быть в структуруе с ключем ЯзыкГенератораGherkin
		Если Элемент.Ключ = "ОсновнойЯзык" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектЗагрузки[Элемент.Ключ] = Элемент.Значение;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(ОбъектВыгрузки) Экспорт
	
	Если ОбъектВыгрузки.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", ОбъектВыгрузки.DebugLog);
	Настройки.Вставить("ГенерироватьУФ", ОбъектВыгрузки.ГенерироватьУФ);
	Настройки.Вставить("КаталогФич", ОбъектВыгрузки.КаталогФич);
	
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", ОбъектВыгрузки.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutputAllure", ОбъектВыгрузки.КаталогOutputAllure);
	
	Настройки.Вставить("ДелатьОтчетВоВнутреннемФормате", ОбъектВыгрузки.ДелатьОтчетВоВнутреннемФормате);
	
	Настройки.Вставить("ДелатьОтчетВФорматеjUnit", ОбъектВыгрузки.ДелатьОтчетВФорматеjUnit);
	Настройки.Вставить("КаталогOutputjUnit", ОбъектВыгрузки.КаталогOutputjUnit);
	
	Настройки.Вставить("ДелатьОтчетВФорматеCucumberJson", ОбъектВыгрузки.ДелатьОтчетВФорматеCucumberJson);
	Настройки.Вставить("КаталогOutputCucumberJson", ОбъектВыгрузки.КаталогOutputCucumberJson);
	
	Настройки.Вставить("текЗначениеОперации", ОбъектВыгрузки.текЗначениеОперации);
	Настройки.Вставить("КаталогиБиблиотек", ОбъектВыгрузки.КаталогиБиблиотек);
	
	Настройки.Вставить("СоздаватьИнструкциюHTML", ОбъектВыгрузки.СоздаватьИнструкциюHTML);
	Настройки.Вставить("КаталогOutputИнструкцияHTML", ОбъектВыгрузки.КаталогOutputИнструкцияHTML);
	
	Настройки.Вставить("СоздаватьИнструкциюMarkdown", ОбъектВыгрузки.СоздаватьИнструкциюMarkdown);
	Настройки.Вставить("КаталогOutputИнструкцияMarkdown", ОбъектВыгрузки.КаталогOutputИнструкцияMarkdown);
	
	Настройки.Вставить("СоздаватьИнструкциюВидео", ОбъектВыгрузки.СоздаватьИнструкциюВидео);
	Настройки.Вставить("КаталогOutputИнструкцияВидео", ОбъектВыгрузки.КаталогOutputИнструкцияВидео);
	
	Настройки.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", ОбъектВыгрузки.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	Настройки.Вставить("СписокТеговИсключение", ОбъектВыгрузки.СписокТеговИсключение);
	Настройки.Вставить("СписокТеговОтбор", ОбъектВыгрузки.СписокТеговОтбор);
	
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВЖР", ОбъектВыгрузки.ДелатьЛогВыполненияСценариевВЖР);
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", ОбъектВыгрузки.ДелатьЛогВыполненияСценариевВТекстовыйФайл);
	Настройки.Вставить("ИмяФайлаЛогВыполненияСценариев", ОбъектВыгрузки.ИмяФайлаЛогВыполненияСценариев);
	Настройки.Вставить("ПодключитьВнешниеОбработкиДляОтладки", ОбъектВыгрузки.ПодключитьВнешниеОбработкиДляОтладки);
	
	Настройки.Вставить("ВыполнятьШагиАссинхронно", ОбъектВыгрузки.ВыполнятьШагиАссинхронно);
	
	Настройки.Вставить("СохранятьКонтекстыПередВыполнениемШагов", ОбъектВыгрузки.СохранятьКонтекстыПередВыполнениемШагов);
	
	Настройки.Вставить("СоздаватьОбластиПриГенерацииКода", ОбъектВыгрузки.СоздаватьОбластиПриГенерацииКода);
	
	Настройки.Вставить("КаталогИнструментов", ОбъектВыгрузки.КаталогИнструментов);
	
	Настройки.Вставить("ВыводитьТекстМодуляВместоПерегенерацииEPF", ОбъектВыгрузки.ВыводитьТекстМодуляВместоПерегенерацииEPF);
	
	Настройки.Вставить("КомандаСделатьСкриншот", ОбъектВыгрузки.КомандаСделатьСкриншот);
	
	Настройки.Вставить("ДелатьСкриншотПриВозникновенииОшибки", ОбъектВыгрузки.ДелатьСкриншотПриВозникновенииОшибки);
	Настройки.Вставить("СниматьСкриншотКаждогоОкна1С", ОбъектВыгрузки.СниматьСкриншотКаждогоОкна1С);
	Настройки.Вставить("КаталогOutputСкриншоты", ОбъектВыгрузки.КаталогOutputСкриншоты);
	
	Настройки.Вставить("ИнтервалВыполненияШагаЗаданныйПользователем", ОбъектВыгрузки.ИнтервалВыполненияШагаЗаданныйПользователем);
	Настройки.Вставить("КаталогПроекта", ОбъектВыгрузки.КаталогПроекта);
	
	Настройки.Вставить("ЗапускатьТестКлиентВРежимеОтладки", ОбъектВыгрузки.ЗапускатьТестКлиентВРежимеОтладки);
	Настройки.Вставить("КлючиОтладки", 						ОбъектВыгрузки.КлючиОтладки);
	Настройки.Вставить("АдресОтладчика", 					ОбъектВыгрузки.АдресОтладчика);
	
	//запись видео
	Настройки.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", ОбъектВыгрузки.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	Настройки.Вставить("ЗаписьВидеоЭкранШирина", ОбъектВыгрузки.ЗаписьВидеоЭкранШирина);
	Настройки.Вставить("ЗаписьВидеоЭкранВысота", ОбъектВыгрузки.ЗаписьВидеоЭкранВысота);
	Настройки.Вставить("ЗаписьВидеоКоличествоКадров", ОбъектВыгрузки.ЗаписьВидеоКоличествоКадров);
	Настройки.Вставить("ЗаписьВидеоФайлКурсораМышки", ОбъектВыгрузки.ЗаписьВидеоФайлКурсораМышки);
	Настройки.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", ОбъектВыгрузки.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	Настройки.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", ОбъектВыгрузки.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	Настройки.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", ОбъектВыгрузки.ЗаписьВидеоКаталогДляВременныхФайлов);
	Настройки.Вставить("ЗаписьВидеоФайлВодянойЗнак", ОбъектВыгрузки.ЗаписьВидеоФайлВодянойЗнак);
	Настройки.Вставить("ЗаписьВидеоКомандаFfmpeg", ОбъектВыгрузки.ЗаписьВидеоКомандаFfmpeg);
	Настройки.Вставить("ЗаписьВидеоКомандаConvert", ОбъектВыгрузки.ЗаписьВидеоКомандаConvert);
	Настройки.Вставить("ЗаписьВидеоКаталогМузыки", ОбъектВыгрузки.ЗаписьВидеоКаталогМузыки);
	Настройки.Вставить("ЗаписьВидеоДелатьНаложениеTTS", ОбъектВыгрузки.ЗаписьВидеоДелатьНаложениеTTS);
	Настройки.Вставить("ЗаписьВидеоПутьКДвижкуTTS", ОбъектВыгрузки.ЗаписьВидеоПутьКДвижкуTTS);
	Настройки.Вставить("ЗаписьВидеоИмяTTS", ОбъектВыгрузки.ЗаписьВидеоИмяTTS);
	Настройки.Вставить("ЗаписьВидеоСловарьЗамен", ОбъектВыгрузки.ЗаписьВидеоСловарьЗамен);
	
	Настройки.Вставить("ОстановкаПриВозникновенииОшибки", ОбъектВыгрузки.ОстановкаПриВозникновенииОшибки);
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", ОбъектВыгрузки.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", ОбъектВыгрузки.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("СгенерированныйXML", ОбъектВыгрузки.СгенерированныйXML);
	Настройки.Вставить("СгенерированныйКод", ОбъектВыгрузки.СгенерированныйКод);
	Настройки.Вставить("СгенерированныйСценарий", ОбъектВыгрузки.СгенерированныйСценарий);
	Настройки.Вставить("СгенерированныйСценарийКод", ОбъектВыгрузки.СгенерированныйСценарийКод);
	
	Настройки.Вставить("ВерсияПлатформыДляГенерацииEPF", ОбъектВыгрузки.ВерсияПлатформыДляГенерацииEPF);
	
	Настройки.Вставить("ДополнительныеПараметры", ОбъектВыгрузки.ДополнительныеПараметры);
	Настройки.Вставить("ТаймаутЗапуска1С", ОбъектВыгрузки.ТаймаутЗапуска1С);
	Настройки.Вставить("ДиапазонПортовTestclient", ОбъектВыгрузки.ДиапазонПортовTestclient);
	Настройки.Вставить("ОсновнойЯзык", ОбъектВыгрузки.ЯзыкГенератораGherkin);
	Настройки.Вставить("ВерсияVB", ВерсияВБКлиент);
		
	СохранитьНастройкиСервер(Настройки, ПолучитьИДДляОбщегоСохраненияНастроек());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиВРежимеКоманднойСтроки(ОбъектЯдра, СтруктураДействий) Экспорт
	
	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);
	ПараметрыЭталон = СоздатьСтруктуруПараметровЗапуска();
	ПеременныеСреды = ПрочитатьПеременныеСреды();
	
	КаталогПроекта = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "workspaceRoot");
	КаталогПроекта = ?(КаталогПроекта = Неопределено, ПолучитьЗначениеПереданногоПараметра(ПеременныеСреды, "workspaceRoot"), КаталогПроекта);
	
	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		ОбъектЯдра.КаталогПроекта = КаталогПроекта;
	КонецЕсли; 
	
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);
	ПутьКОбработке = КонтекстЯдра.ПолучитьПутьКОбработкеКлиент();
	
	StartFeaturePlayer = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "StartFeaturePlayer") = Истина Или ПолучитьЗначениеПереданногоПараметра(ПеременныеСреды, "StartFeaturePlayer") = Истина;
	Если StartFeaturePlayer = Истина Тогда
		ОбъектЯдра.ЗапускИзКоманднойСтроки = Истина;
		ОбъектЯдра.СохранятьКонтекстыПередВыполнениемШагов = Ложь;
		
		VBParams = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "VBParams");
		Если VBParams = Неопределено Тогда
			КонтекстЯдра.СделатьСообщение("Не найден путь к файлу JSON. Параметр: VBParams.");
			ПараметрыФайла = СоздатьСтруктуруПараметровЗапуска();
		Иначе 
			ПараметрыФайла = КонтекстЯдра.ПрочитатьСтруктуруИзJSONФайлаКлиент(VBParams);
			Если ПараметрыФайла = Неопределено Тогда
				КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON пропускаем чтение");
			КонецЕсли; 
		КонецЕсли;	 
		
		СтрутктураJSON = ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПеременныеСреды, ПараметрыФайла);
		
		Если СтрутктураJSON = Неопределено Тогда
			КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON.");
			Возврат;
		КонецЕсли;
		
		//ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтрутктураJSON);
		ПромСтр = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогФич"));
		Если ПромСтр = Неопределено Тогда
			КонтекстЯдра.СделатьСообщение("В параметрах JSON не найден каталог Фич!");
			Возврат;
		КонецЕсли;	 
		
		ОбъектЯдра.КаталогФич = ПромСтр;
		
		ОбъектЯдра.КаталогиБиблиотек.Очистить();
		ЗначКаталогиБиблиотек = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогиБиблиотек");
		Если ТипЗнч(ЗначКаталогиБиблиотек) = Тип("Массив") Тогда			
			Для Ккк = 0 По ЗначКаталогиБиблиотек.Количество() - 1 Цикл
				ЗначКаталогиБиблиотек[Ккк] = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗначКаталогиБиблиотек[Ккк]);
			КонецЦикла;	
			ОбъектЯдра.КаталогиБиблиотек.ЗагрузитьЗначения(ЗначКаталогиБиблиотек);
		КонецЕсли;  
		
		СтруктураДействий.Вставить("ВыгрузитьPIDTestManager", ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыгрузитьPIDTestManager"));
		СтруктураДействий.Вставить("ИмяФайлаPIDTestManager", ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаPIDTestManager"));
		
		ЗнИмяФайлаВнешнихКомандФреймворка = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаВнешнихКомандФреймворка");
		Если ЗначениеЗаполнено(ЗнИмяФайлаВнешнихКомандФреймворка) Тогда			
			ОбъектЯдра.ИмяФайлаВнешнихКомандФреймворка = ЗнИмяФайлаВнешнихКомандФреймворка;
		КонецЕсли;
		
		ЗнПриравниватьPendingКFailed = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПриравниватьPendingКFailed");
		Если ЗначениеЗаполнено(ЗнИмяФайлаВнешнихКомандФреймворка) Тогда			
			ОбъектЯдра.ПриравниватьPendingКFailed = ЗнПриравниватьPendingКFailed;
		КонецЕсли;
		
		ЗнОстановкаПриВозникновенииОшибки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ОстановкаПриВозникновенииОшибки");
		Если ЗначениеЗаполнено(ЗнОстановкаПриВозникновенииОшибки) Тогда			
			ОбъектЯдра.ОстановкаПриВозникновенииОшибки = ЗнОстановкаПриВозникновенииОшибки;
		КонецЕсли;  
		
		ЗнКаталогИнструментов = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогИнструментов");
		Если ЗначениеЗаполнено(ЗнКаталогИнструментов) Тогда			
			ОбъектЯдра.КаталогИнструментов = ЗнКаталогИнструментов;
		КонецЕсли;
		
		ЗнКаталогПроекта = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогПроекта");
		Если ЗначениеЗаполнено(ЗнКаталогПроекта) Тогда			
			ОбъектЯдра.КаталогПроекта = ЗнКаталогПроекта;
		КонецЕсли;  
	
		
		//добавим базовые библиотеки, если они не указаны
		Если ОбъектЯдра.КаталогиБиблиотек.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(ОбъектЯдра.КаталогИнструментов) Тогда
				ОбъектЯдра.КаталогиБиблиотек.Добавить(КонтекстЯдра.ДополнитьСлешВПуть(ОбъектЯдра.КаталогИнструментов) + "features/libraries");
			КонецЕсли;	 
		КонецЕсли;	 

		
		ОбъектЯдра.СписокТеговИсключение.Очистить();
		ЗначСписокТеговИсключение = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СписокТеговИсключение");
		Если ТипЗнч(ЗначСписокТеговИсключение) = Тип("Массив") Тогда
			ОбъектЯдра.СписокТеговИсключение.ЗагрузитьЗначения(ЗначСписокТеговИсключение);
		КонецЕсли;  
		
		ОбъектЯдра.СписокТеговОтбор.Очистить();
		ЗначСписокТеговОтбор = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СписокТеговОтбор");
		Если ТипЗнч(ЗначСписокТеговОтбор) = Тип("Массив") Тогда
			ОбъектЯдра.СписокТеговОтбор.ЗагрузитьЗначения(ЗначСписокТеговОтбор);
		КонецЕсли;  
		
		ЗнДелатьСообщенияТранслитом = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьСообщенияТранслитом");
		Если ЗнДелатьСообщенияТранслитом = Истина Тогда
			ОбъектЯдра.ДелатьСообщенияТранслитом = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюHTML = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюHTML");
		Если ЗнСоздаватьИнструкциюHTML = Истина Тогда
			ОбъектЯдра.СоздаватьИнструкциюHTML = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюMarkdown = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюMarkdown");
		Если ЗнСоздаватьИнструкциюMarkdown = Истина Тогда
			ОбъектЯдра.СоздаватьИнструкциюMarkdown = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюВидео = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюВидео");
		Если ЗнСоздаватьИнструкциюВидео = Истина Тогда
			ОбъектЯдра.СоздаватьИнструкциюВидео = Истина;
		КонецЕсли;	 
		
		ЗнДелатьЛогВыполненияСценариевВЖР = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьЛогВыполненияСценариевВЖР");
		Если ЗнДелатьЛогВыполненияСценариевВЖР = Истина Тогда
			ОбъектЯдра.ДелатьЛогВыполненияСценариевВЖР = Истина;
		КонецЕсли;	  		
		
		ЗнДелатьЛогВыполненияСценариевВТекстовыйФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьЛогВыполненияСценариевВТекстовыйФайл");
		Если ЗнДелатьЛогВыполненияСценариевВТекстовыйФайл = Истина Тогда
			ОбъектЯдра.ДелатьЛогВыполненияСценариевВТекстовыйФайл = Истина;
			ОбъектЯдра.ИмяФайлаЛогВыполненияСценариев             = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаЛогВыполненияСценариев"));
		КонецЕсли;	  		
		
		ЗнВерсияПлатформыДляГенерацииEPF = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВерсияПлатформыДляГенерацииEPF");
		Если ЗначениеЗаполнено(ЗнВерсияПлатформыДляГенерацииEPF) Тогда
			ОбъектЯдра.ВерсияПлатформыДляГенерацииEPF = ЗнВерсияПлатформыДляГенерацииEPF;
		КонецЕсли;	 
		
		ЗнКлиентыТестирования = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КлиентыТестирования");
		Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
			Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
				ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Имя;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
				
				НайденныеСтроки = КонтекстЯдра.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
				Иначе	
					СтрокаДанныеКлиентовТестирования     = КонтекстЯдра.ДанныеКлиентовТестирования.Добавить();
					СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
				КонецЕсли;	 
				
				
				СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования.ПутьКИнфобазе;
				СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования.ДопПараметры;
				СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования.ТипКлиента;
				СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования.ИмяКомпьютера;
				СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования.ПортЗапускаТестКлиента;
				Если ПараметрыКлиентаТестирования.Свойство("Синоним") Тогда
					СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования.Синоним;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ЗнДополнительныеПараметры = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДополнительныеПараметры");
		Если ЗначениеЗаполнено(ЗнДополнительныеПараметры) Тогда
			Для Каждого Элем Из ЗнДополнительныеПараметры Цикл
				ЗнДополнительныеПараметры.Вставить(Элем.Ключ, КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
			КонецЦикла;	
			ОбъектЯдра.ДополнительныеПараметры = ЗнДополнительныеПараметры;
		КонецЕсли;	 
		
		
		ЗнЗапускатьТестКлиентВРежимеОтладки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗапускатьТестКлиентВРежимеОтладки");
		Если ЗнЗапускатьТестКлиентВРежимеОтладки = Истина Тогда
			ОбъектЯдра.ЗапускатьТестКлиентВРежимеОтладки = Истина;
		КонецЕсли;
		
		ЗнДиапазонПортовTestclient = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДиапазонПортовTestclient");
		Если ЗначениеЗаполнено(ЗнДиапазонПортовTestclient) Тогда
			ОбъектЯдра.ДиапазонПортовTestclient = ЗнДиапазонПортовTestclient;
		КонецЕсли;	 
		
		Попытка
			ЗнТаймаутЗапуска1С = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ТаймаутЗапуска1С");
			ТаймаутЗапуска1С = Число(ЗнТаймаутЗапуска1С);
		Исключение
			ТаймаутЗапуска1С = 25;
			Стр = "Не удалось получить таймаут для запуска TestClient из значения " + ЗнТаймаутЗапуска1С + ". Используется значение по умолчанию: 5";
			КонтекстЯдра.СделатьСообщение(Стр);
			ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
		КонецПопытки;
		ОбъектЯдра.ТаймаутЗапуска1С = ТаймаутЗапуска1С;
		
		//по скриншотам - начало
		ЗнДелатьСкриншотПриВозникновенииОшибки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьСкриншотПриВозникновенииОшибки");
		Если ЗнДелатьСкриншотПриВозникновенииОшибки = Истина Тогда
			ОбъектЯдра.ДелатьСкриншотПриВозникновенииОшибки = Истина;
		КонецЕсли;	 
		
		ЗнСниматьСкриншотКаждогоОкна1С = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СниматьСкриншотКаждогоОкна1С");
		Если ЗнСниматьСкриншотКаждогоОкна1С = Истина Тогда
			ОбъектЯдра.СниматьСкриншотКаждогоОкна1С = Истина;
		КонецЕсли;	 
		
		ЗнКомандаСделатьСкриншот = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КомандаСделатьСкриншот");
		Если ЗначениеЗаполнено(ЗнКомандаСделатьСкриншот) Тогда
			ОбъектЯдра.КомандаСделатьСкриншот = ЗнКомандаСделатьСкриншот;
		КонецЕсли;	 
		
		Если ОбъектЯдра.ДелатьСкриншотПриВозникновенииОшибки Тогда
			ЗнКаталогOutputСкриншоты = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputСкриншоты");
			ОбъектЯдра.КаталогOutputСкриншоты = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputСкриншоты);
		КонецЕсли;	 
		//по скриншотам - окончание
		
		//по записи видео - начало
		ОбъектЯдра.ЗаписьВидеоКомандаНачатьЗаписьВидео                     = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаНачатьЗаписьВидео");
		ОбъектЯдра.ЗаписьВидеоФайлКурсораМышки                             = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоФайлКурсораМышки"));
		ОбъектЯдра.ЗаписьВидеоКаталогДляВременныхФайлов                    = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКаталогДляВременныхФайлов"));
		ОбъектЯдра.ЗаписьВидеоФайлВодянойЗнак                              = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоФайлВодянойЗнак"));
		ОбъектЯдра.ЗаписьВидеоКомандаFfmpeg                                = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаFfmpeg");
		ОбъектЯдра.ЗаписьВидеоКомандаConvert                               = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаConvert");
		ОбъектЯдра.ЗаписьВидеоКаталогМузыки                                = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКаталогМузыки"));
		ОбъектЯдра.ЗаписьВидеоДелатьНаложениеTTS                           = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоДелатьНаложениеTTS");
		ОбъектЯдра.ЗаписьВидеоПутьКДвижкуTTS                               = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПутьКДвижкуTTS");
		ОбъектЯдра.ЗаписьВидеоИмяTTS                                       = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоИмяTTS");
		
				
		ЗнЗаписьВидеоСловарьЗамен = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоСловарьЗамен");
		Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗамен) Тогда
			ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
			ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнЗаписьВидеоСловарьЗамен));
		КонецЕсли;	
		
		ЗнЗаписьВидеоСловарьЗаменСписок = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоСловарьЗаменСписок");
		Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗаменСписок) Тогда
			Если ТипЗнч(ЗнЗаписьВидеоСловарьЗаменСписок) = Тип("Массив") Тогда
				ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
				Для Каждого Элем Из ЗнЗаписьВидеоСловарьЗаменСписок Цикл
					ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем));
				КонецЦикла;	
			КонецЕсли;  
		КонецЕсли;
		
		ОбъектЯдра.ЗаписьВидеоЭкранШирина                                  = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоЭкранШирина");
		ОбъектЯдра.ЗаписьВидеоЭкранВысота                                  = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоЭкранВысота");
		ОбъектЯдра.ЗаписьВидеоКоличествоКадров                             = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКоличествоКадров");
		ОбъектЯдра.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм             = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм");
		ОбъектЯдра.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы");
		//по записи видео - окончание
		ОбъектЯдра.ИмяТекущейСборки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяСборки");
		ЗнЗакрытьTestClientПослеЗапускаСценариев = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗакрытьTestClientПослеЗапускаСценариев");
		Если ЗнЗакрытьTestClientПослеЗапускаСценариев = Истина Тогда
			ОбъектЯдра.ЗакрытьTestClientПослеЗапускаСценариев = Истина;
		КонецЕсли;	 
		
		Если ОбъектЯдра.СоздаватьИнструкциюHTML Тогда
			ЗнКаталогOutputИнструкцияHTML = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияHTML");
			ОбъектЯдра.КаталогOutputИнструкцияHTML = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияHTML);
		КонецЕсли;	 
		
		Если ОбъектЯдра.СоздаватьИнструкциюMarkdown Тогда
			ЗнКаталогOutputИнструкцияMarkdown = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияMarkdown");
			ОбъектЯдра.КаталогOutputИнструкцияMarkdown = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияMarkdown);
		КонецЕсли;	 
		
		Если ОбъектЯдра.СоздаватьИнструкциюВидео Тогда
			ЗнКаталогOutputИнструкцияВидео = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияВидео");
			ОбъектЯдра.КаталогOutputИнструкцияВидео = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияВидео);
		КонецЕсли;
		
		Если ОбъектЯдра.ЗапускатьТестКлиентВРежимеОтладки Тогда
			ОбъектЯдра.КлючиОтладки 	= ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КлючиОтладки");
			ОбъектЯдра.АдресОтладчика 	= ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "АдресОтладчика");
		КонецЕсли;
		
		
		//для отчетов о прохождении сценариев
		ЗнДобавлятьКИмениСценарияУсловияВыгрузки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДобавлятьКИмениСценарияУсловияВыгрузки");
		Если ЗнДобавлятьКИмениСценарияУсловияВыгрузки = Истина Тогда
			ОбъектЯдра.ДобавлятьКИмениСценарияУсловияВыгрузки = Истина;
		КонецЕсли;	 
		
		ЗнВыгружатьСтатусВыполненияСценариевВФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыгружатьСтатусВыполненияСценариевВФайл");
		Если ЗнВыгружатьСтатусВыполненияСценариевВФайл = Истина Тогда
			ОбъектЯдра.ВыгружатьСтатусВыполненияСценариевВФайл = Истина;
		КонецЕсли;	 
		
		ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев");
		Если ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев <> Неопределено Тогда
			ОбъектЯдра.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);
		КонецЕсли;	 
		
		//для отчета jUnit
		ЗнДелатьОтчетВФорматеjUnit = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеjUnit");
		Если ЗнДелатьОтчетВФорматеjUnit = Истина Тогда
			
			ОпределилиКаталогjUnit = Ложь;
			ЗнКаталогOutputjUnit   = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputjUnit");
			Если ЗначениеЗаполнено(ЗнКаталогOutputjUnit) Тогда
				Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
				Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputjUnit") Тогда
					КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
					ФайлПроверкаСуществования = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
					Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
						Стр = "Не смог создать каталог для отчета jUnit: " + ЗнКаталогOutputjUnit;
						КонтекстЯдра.СделатьСообщение(Стр);
						ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
						Возврат;
					КонецЕсли;	 
					
				КонецЕсли;	 
				ОбъектЯдра.КаталогOutputjUnit       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit);
				ОбъектЯдра.ДелатьОтчетВФорматеjUnit = Истина;
				ОпределилиКаталогjUnit          = Истина;
			КонецЕсли;	 
			
			Если НЕ ОпределилиКаталогjUnit Тогда
				КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета jUnit!");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		
		//для отчета CucumberJson
		ЗнДелатьОтчетВФорматеCucumberJson = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеCucumberJson");
		Если ЗнДелатьОтчетВФорматеCucumberJson = Истина Тогда
			
			ОпределилиКаталогCucumberJson = Ложь;
			ЗнКаталогOutputCucumberJson   = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputCucumberJson");
			Если ЗначениеЗаполнено(ЗнКаталогOutputCucumberJson) Тогда
				Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
				Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputCucumberJson") Тогда
					КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
					ФайлПроверкаСуществования = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
					Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
						Стр = "Не смог создать каталог для отчета CucumberJson: " + ЗнКаталогOutputCucumberJson;
						КонтекстЯдра.СделатьСообщение(Стр);
						ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
						Возврат;
					КонецЕсли;	 
					
				КонецЕсли;	 
				ОбъектЯдра.КаталогOutputCucumberJson       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson);
				ОбъектЯдра.ДелатьОтчетВФорматеCucumberJson = Истина;
				ОпределилиКаталогCucumberJson          = Истина;
			КонецЕсли;	 
			
			Если НЕ ОпределилиКаталогCucumberJson Тогда
				КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета CucumberJson!");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		
		//для отчета Allure
		ЗнДелатьОтчетВФорматеАллюр = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеАллюр");
		Если ЗнДелатьОтчетВФорматеАллюр = Истина Тогда
			ОбъектЯдра.ДелатьОтчетВФорматеАллюр = Истина;
		КонецЕсли;	
		
		
		ОпределилиКаталогAllure = Ложь;
		ЗнКаталогOutputAllure = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputAllure");
		Если ЗначениеЗаполнено(ЗнКаталогOutputAllure) Тогда
			КонтекстЯдра.УдалитьКаталогКомандаСистемы(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "КаталогOutputAllure") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllure;
			ОпределилиКаталогAllure         = Истина;
		КонецЕсли;	 
		
		ЗнКаталогOutputAllureБазовый = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputAllureБазовый");
		Если ЗначениеЗаполнено(ЗнКаталогOutputAllureБазовый) Тогда
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputAllureБазовый1") Тогда		
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			
			Если ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки") = Истина Тогда
				ЗнКаталогOutputAllureБазовый = КонтекстЯдра.ДополнитьСлешВПуть(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый)) + ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяСборки");					
				Файл = Новый Файл(ЗнКаталогOutputAllureБазовый);
			КонецЕсли;	 
			
			//ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,"*.xml");
			ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
			Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый2") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
				Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый3") Тогда
					КонтекстЯдра.СделатьСообщение("Не смог создать каталог для отчета Allure: " + ЗнКаталогOutputAllureБазовый);
					Возврат;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllureБазовый;
			ОпределилиКаталогAllure         = Истина;
		КонецЕсли;	 
		
		Если ОбъектЯдра.ДелатьОтчетВФорматеАллюр Тогда
			Если НЕ ОпределилиКаталогAllure Тогда
				КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета Allure!");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		ВыполнятьШагиАссинхронноЗн = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнятьШагиАссинхронно");
		Если ВыполнятьШагиАссинхронноЗн <> Неопределено Тогда
			ОбъектЯдра.ВыполнятьШагиАссинхронно = ВыполнятьШагиАссинхронноЗн;
		КонецЕсли;
		
		СтруктураДействий["ВыполнитьСценарии"] = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнитьСценарии");
		СтруктураДействий["ВыполнитьСценарииСТекущегоШага"] = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнитьСценарииСТекущегоШага");
		СтруктураДействий["ЗавершитьРаботуСистемы"] = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗавершитьРаботуСистемы");
		СтруктураДействий["НомерСтрокиДляЗапускаСТекущегоШагаСценария"] = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "НомерСтрокиДляЗапускаСТекущегоШагаСценария");
		СтруктураДействий["ЗагрузитьСценарии"] = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗагрузитьСценарии");
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек()
	Стр = "VanessaBehaviorUF";
	Если РежимСамотестирования Тогда
		Стр = "VanessaBehaviorUF_autotest";
	КонецЕсли;	 
	Возврат Стр;
	
КонецФункции

&НаСервере
Процедура СкопироватьЗначениеСтруктуры(ИмяКлюча, Источник, Приемник)
	
	Если Источник.Свойство(ИмяКлюча) Тогда
		Приемник.Вставить(ИмяКлюча, Источник[ИмяКлюча]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиСервер(ЭтоLinux)
	Перем НастройкиРезультат;
	
	НастройкиРезультат = Новый Структура;
	НадоСохранитьНастройки = Ложь;
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		СкопироватьЗначениеСтруктуры("DebugLog", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ГенерироватьУФ", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогФич", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВоВнутреннемФормате", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеАллюр", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputAllure", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеjUnit", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputjUnit", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеCucumberJson", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputCucumberJson", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("текЗначениеОперации", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогиБиблиотек", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюHTML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияHTML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюMarkdown", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияMarkdown", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюВидео", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияВидео", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СписокТеговИсключение", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СписокТеговОтбор", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьЛогВыполненияСценариевВЖР", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ИмяФайлаЛогВыполненияСценариев", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ПодключитьВнешниеОбработкиДляОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьОбластиПриГенерацииКода", Настройки, НастройкиРезультат);
		Если НЕ Настройки.Свойство("СоздаватьОбластиПриГенерацииКода") Тогда
			НастройкиРезультат.СоздаватьОбластиПриГенерацииКода = Истина;
		КонецЕсли;	 
		
		СкопироватьЗначениеСтруктуры("КаталогПроекта", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗапускатьТестКлиентВРежимеОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КлючиОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("АдресОтладчика", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВыводитьТекстМодуляВместоПерегенерацииEPF", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КомандаСделатьСкриншот", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВыполнятьШагиАссинхронно", Настройки, НастройкиРезультат);
											
		СкопироватьЗначениеСтруктуры("СохранятьКонтекстыПередВыполнениемШагов", Настройки, НастройкиРезультат);
				
	
		Если ПустаяСтрока(НастройкиРезультат.КомандаСделатьСкриншот) Тогда
			Если ЭтоLinux Тогда
				НастройкиРезультат.КомандаСделатьСкриншот = "import -window root";
			Иначе
				НастройкиРезультат.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
			КонецЕсли;	 
		КонецЕсли;	 
		
		СкопироватьЗначениеСтруктуры("ДелатьСкриншотПриВозникновенииОшибки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СниматьСкриншотКаждогоОкна1С", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputСкриншоты", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ИнтервалВыполненияШагаЗаданныйПользователем", Настройки, НастройкиРезультат);
		
		
		
		//настройки записи видео
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаНачатьЗаписьВидео", Настройки, НастройкиРезультат);
		
		Если Настройки.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео") Тогда
			СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаНачатьЗаписьВидео", Настройки, НастройкиРезультат);
		Иначе
			НастройкиРезультат["ЗаписьВидеоКомандаНачатьЗаписьВидео"] = """C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}";
		КонецЕсли;	 
		//"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image="<screenmouseimage>" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}
		
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоЭкранШирина", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоЭкранВысота", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКоличествоКадров", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоФайлКурсораМышки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКаталогДляВременныхФайлов", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоФайлВодянойЗнак", Настройки, НастройкиРезультат);
		
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаFfmpeg", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаConvert", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКаталогМузыки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоДелатьНаложениеTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПутьКДвижкуTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоИмяTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоСловарьЗамен", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ОстановкаПриВозникновенииОшибки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗагрузкаФичПриОткрытии", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйXML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйКод", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйСценарий", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйСценарийКод", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДополнительныеПараметры", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ТаймаутЗапуска1С", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДиапазонПортовTestclient", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ОсновнойЯзык", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВерсияVB", Настройки, НастройкиРезультат);

		ВерсияVB = Неопределено;
		НастройкиРезультат.Свойство("ВерсияVB", ВерсияVB);
		Если НЕ ЗначениеЗаполнено(ВерсияVB) Тогда
			НастройкиРезультат.Вставить("ВерсияVB", ВерсияВБКлиент);
			НастройкиРезультат.Вставить("ДействиеСброситьКешИзвестныхStepDefinitionСервер", Истина);
			//СброситьКешИзвестныхStepDefinitionСервер();
			НадоСохранитьНастройки = Истина;
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(НастройкиРезультат.ЗагрузкаФичПриОткрытии) Тогда
			НастройкиРезультат.ЗагрузкаФичПриОткрытии = "Загружать";
		КонецЕсли;	 
			
		ДополнительныеПараметры = Неопределено;
		НастройкиРезультат.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
		Если ДополнительныеПараметры = Неопределено Тогда
			НастройкиРезультат["ДополнительныеПараметры"] = Новый Структура;
		КонецЕсли;
		
		ТаймаутЗапуска1С = Неопределено;
		НастройкиРезультат.Свойство("ТаймаутЗапуска1С", ТаймаутЗапуска1С);
		Если ТаймаутЗапуска1С = Неопределено ИЛИ ТаймаутЗапуска1С = 0  Тогда
			НастройкиРезультат["ТаймаутЗапуска1С"] = 25;
		КонецЕсли;
		
		ЯзыкГенератораGherkin = Неопределено;
		Если Настройки.Свойство("ОсновнойЯзык", ЯзыкГенератораGherkin) Тогда
			НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", ЯзыкГенератораGherkin);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЯзыкГенератораGherkin) Тогда
			НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", "ru");
		КонецЕсли;	 
		
	Иначе	//значит это первый запуск VB
		НастройкиРезультат.Вставить("ГенерироватьУФ", Истина);
		НастройкиРезультат.Вставить("СписокТеговИсключение", Новый СписокЗначений);
		НастройкиРезультат.Вставить("КаталогиБиблиотек", Новый СписокЗначений);
		НастройкиРезультат.Вставить("КомандаСделатьСкриншот", "");
		
		НастройкиРезультат.КаталогиБиблиотек.Добавить("$instrumentsRoot" + "/features/libraries");
		НастройкиРезультат.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
		
		Если ЭтоLinux Тогда
			НастройкиРезультат["КомандаСделатьСкриншот"]= "import -window root ";
		Иначе
			НастройкиРезультат["КомандаСделатьСкриншот"] = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
		КонецЕсли;
		
		НастройкиРезультат.Вставить("ЗагрузкаФичПриОткрытии", "Загружать");
		НастройкиРезультат.Вставить("ТаймаутЗапуска1С", 25);
		НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", "ru");
		
	КонецЕсли;
	
	Если НадоСохранитьНастройки Тогда
		СохранитьНастройкиСервер(НастройкиРезультат, ПолучитьИДДляОбщегоСохраненияНастроек());
	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(НастройкиРезультат);
	
КонецФункции

// { Настройки из файла json, переменных окружения.
&НаКлиенте
Функция ПрочитатьПеременныеСреды() 
	СоответствееПеременныхПути = Новый Соответствие;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
        Если ЭтоLinux Тогда 
            КомандаСистемы("sh -c 'env > " + ИмяВременногоФайла + "'");
        Иначе 
            КонтекстЯдра.ВыполнитьКомандуОСБезПоказаЧерногоОкна("set > """ + ИмяВременногоФайла + """");
        КонецЕсли;
    Исключение
        Сообщить("ПрочитатьПеременныеСреды:" + ОписаниеОшибки());
    КонецПопытки;
	
	Попытка 
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			//Найдем ключ и значение
			Индекс = Найти(Стр, "=");
			Если Индекс > 0 Тогда 
				Ключ = Нрег(Лев(Стр, Индекс - 1));
				Если ВРег(Лев(Ключ, 8))="VANESSA_" Тогда 
					Ключ = Сред(Ключ, 9);
					Значение = Сред(Стр, Индекс + 1);
					СоответствееПеременныхПути.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Исключение 
	КонецПопытки;
	
	КоллекцияКоммандЗапуска = КоллекцияКомандЗапуска();
	СтруктураПараметров = Новый Структура;
	Для каждого ЭлементСтруктуры из КоллекцияКоммандЗапуска Цикл 
		Для каждого ЭлементПеременных из СоответствееПеременныхПути Цикл
			Попытка
				Если НайтиКоманду(ЭлементСтруктуры.Значение, ЭлементПеременных.Ключ) Тогда 
					СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементПеременных.Значение);
					Прервать;
				КонецЕсли;
			Исключение
				Сообщить("Ошбика команды "+ЭлементСтруктуры.Ключ + " для " + ЭлементПеременных.Ключ);
			КонецПопытки;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруПараметровЗапуска()
	Рез = Новый Структура;
	Рез.Вставить("StartFeaturePlayer", Ложь);
	Рез.Вставить("КаталогФич", "");
	Рез.Вставить("КаталогиБиблиотек", Новый Массив);
	Рез.Вставить("СписокТеговИсключение", Новый Массив);
	Рез.Вставить("СписокТеговОтбор", Новый Массив);
	Рез.Вставить("ВыгрузитьPIDTestManager", Ложь);
	Рез.Вставить("ИмяФайлаPIDTestManager", "");
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", "");
	Рез.Вставить("ПриравниватьPendingКFailed", Ложь);
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Ложь);
	Рез.Вставить("ДелатьСообщенияТранслитом", Ложь);
	Рез.Вставить("СоздаватьИнструкциюHTML", Ложь);
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Ложь);
	Рез.Вставить("СоздаватьИнструкциюВидео", Ложь);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Истина);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Ложь);
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", "");
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Ложь);
	Рез.Вставить("КаталогOutputИнструкцияHTML", "");
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", "");
	Рез.Вставить("КаталогOutputИнструкцияВидео", "");
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Ложь);
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Ложь);
	Рез.Вставить("КаталогИнструментов", "");
	Рез.Вставить("КаталогПроекта", "");
	Рез.Вставить("КаталогOutputAllure", "");
	Рез.Вставить("КаталогOutputAllureБазовый", "");
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Ложь);
	Рез.Вставить("КаталогOutputjUnit", "");
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Ложь);
	Рез.Вставить("КаталогOutputCucumberJson", "");
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Ложь);
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Ложь);
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Ложь);
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "");
	Рез.Вставить("ВыполнитьСценарии", Ложь);
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Ложь);
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", "");
	Рез.Вставить("ЗагрузитьСценарии", Ложь);
	Рез.Вставить("ЗавершитьРаботуСистемы", Ложь);
	Рез.Вставить("ИмяСборки", "");
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Ложь);
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Ложь);
	Рез.Вставить("КомандаСделатьСкриншот", "");
	Рез.Вставить("КаталогOutputСкриншоты", "");
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Ложь);
	Рез.Вставить("КлючиОтладки", "");
	Рез.Вставить("АдресОтладчика", "");
	Рез.Вставить("ВыполнятьШагиАссинхронно", Истина);
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", "");
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", "");
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", "");
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", "");
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", "");
	Рез.Вставить("ЗаписьВидеоКомандаConvert", "");
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", "");
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Ложь);
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", "");
	Рез.Вставить("ЗаписьВидеоИмяTTS", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Неопределено);
	Рез.Вставить("ЗаписьВидеоЭкранШирина", "");
	Рез.Вставить("ЗаписьВидеоЭкранВысота", "");
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", "");
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Ложь);
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Ложь);
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", "");
	
	Рез.Вставить("ДополнительныеПараметры", Неопределено);
	
	Рез.Вставить("КлиентыТестирования", Неопределено);
	Рез.Вставить("ТаймаутЗапуска1С", "25");
	Рез.Вставить("ДиапазонПортовTestclient", "");
	
	Возврат Рез;
КонецФункции
	
&НаКлиенте
Функция КоллекцияКомандЗапуска()
	Рез = СоздатьСтруктуруПараметровЗапуска();
	Рез.Вставить("StartFeaturePlayer", Новый Структура("Р, А", "StartFeaturePlayer", "startfeatureplayer"));
	Рез.Вставить("КаталогФич", Новый Структура("Р, А", "КаталогФич", "featurepath"));
	Рез.Вставить("КаталогиБиблиотек", Новый Структура("Р, А", "КаталогиБиблиотек", "librarycatalogs"));
	Рез.Вставить("СписокТеговИсключение", Новый Структура("Р, А", "СписокТеговИсключение", "ignoretags"));
	Рез.Вставить("СписокТеговОтбор", Новый Структура("Р, А", "СписокТеговОтбор", "filtertags"));
	Рез.Вставить("ВыгрузитьPIDTestManager", Новый Структура("Р, А", "ВыгрузитьPIDTestManager", "returnpidoftestmanager"));
	Рез.Вставить("ИмяФайлаPIDTestManager", Новый Структура("Р, А", "ИмяФайлаPIDTestManager", "filenamepidtestmanager"));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", Новый Структура("Р, А", "ИмяФайлаВнешнихКомандФреймворка", "fileofcommand"));
	Рез.Вставить("ПриравниватьPendingКFailed", Новый Структура("Р, А", "ПриравниватьPendingКFailed", "pendingequalfailed"));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Новый Структура("Р, А", "ОстановкаПриВозникновенииОшибки", "stoponerror"));
	
	
	Рез.Вставить("ДелатьСообщенияТранслитом", Новый Структура("Р, А", "ДелатьСообщенияТранслитом", "translatemassage"));
	Рез.Вставить("СоздаватьИнструкциюHTML", Новый Структура("Р, А", "СоздаватьИнструкциюHTML", "htmlcreate"));
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Новый Структура("Р, А", "СоздаватьИнструкциюMarkdown", "markdowncreate"));
	Рез.Вставить("СоздаватьИнструкциюВидео", Новый Структура("Р, А", "СоздаватьИнструкциюВидео", "videcreate"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВЖР", "logtogr"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext"));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", Новый Структура("Р, А", "ИмяФайлаЛогВыполненияСценариев", "textlogname"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Новый Структура("Р, А", "ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient"));
	Рез.Вставить("КаталогOutputИнструкцияHTML", Новый Структура("Р, А", "КаталогOutputИнструкцияHTML", "htmlpath"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", Новый Структура("Р, А", "КаталогOutputИнструкцияMarkdown", "markdownpath"));
	Рез.Вставить("КаталогOutputИнструкцияВидео", Новый Структура("Р, А", "КаталогOutputИнструкцияВидео", "videopath"));
	
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Новый Структура("Р, А", "ДелатьОтчетВоВнутреннемФормате", "simplereport"));	 
	
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Новый Структура("Р, А", "ДелатьОтчетВФорматеАллюр", "allurecreatereport"));	 
	Рез.Вставить("КаталогИнструментов", Новый Структура("Р, А", "КаталогИнструментов", "instrpath"));	
	Рез.Вставить("КаталогПроекта", Новый Структура("Р, А", "КаталогПроекта", "projectpath"));
	Рез.Вставить("КаталогOutputAllure", Новый Структура("Р, А", "КаталогOutputAllure", "allurepath"));	
	Рез.Вставить("КаталогOutputAllureБазовый", Новый Структура("Р, А", "КаталогOutputAllureБазовый", "allurepathbase"));
	
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Новый Структура("Р, А", "ДелатьОтчетВФорматеjUnit", "junitcreatereport"));	 
	Рез.Вставить("КаталогOutputjUnit", Новый Структура("Р, А", "КаталогOutputjUnit", "junitpath"));	
	
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Новый Структура("Р, А", "ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport"));	 
	Рез.Вставить("КаталогOutputCucumberJson", Новый Структура("Р, А", "КаталогOutputCucumberJson", "cucumberreportpath"));	
	
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Новый Структура("Р, А", "ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter"));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Новый Структура("Р, А", "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild"));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Новый Структура("Р, А", "ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs"));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", Новый Структура("Р, А", "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath"));
	Рез.Вставить("ВыполнитьСценарии", Новый Структура("Р, А", "ВыполнитьСценарии", "vanessarun"));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Новый Структура("Р, А", "ВыполнитьСценарии", "vanessarunfromthisstep"));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", Новый Структура("Р, А", "НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber"));
	Рез.Вставить("ЗагрузитьСценарии", Новый Структура("Р, А", "ЗагрузитьСценарии", "loadscenarios"));
	Рез.Вставить("ЗавершитьРаботуСистемы", Новый Структура("Р, А", "ЗавершитьРаботуСистемы", "vanessashutdown"));
	Рез.Вставить("ИмяСборки", Новый Структура("Р, А", "ИмяСборки", "buildname"));
	
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Новый Структура("Р, А", "ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot"));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Новый Структура("Р, А", "СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow"));
	Рез.Вставить("КомандаСделатьСкриншот", Новый Структура("Р, А", "КомандаСделатьСкриншот", "commandscreenshot"));
	Рез.Вставить("КаталогOutputСкриншоты", Новый Структура("Р, А", "КаталогOutputСкриншоты", "outputscreenshot"));
	
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", 	Новый Структура("Р, А", "ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug"));
	Рез.Вставить("КлючиОтладки", 						Новый Структура("Р, А", "КлючиОтладки", "testclientdebugkeys"));
	Рез.Вставить("АдресОтладчика", 						Новый Структура("Р, А", "АдресОтладчика", "testclientdebugaddress"));	
	Рез.Вставить("ВыполнятьШагиАссинхронно",				Новый Структура("Р, А", "ВыполнятьШагиАссинхронно", "makestepsasync"));
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Новый Структура("Р, А", "ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo"));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", Новый Структура("Р, А", "ЗаписьВидеоФайлКурсораМышки", "mousecurfile"));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Новый Структура("Р, А", "ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo"));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", Новый Структура("Р, А", "ЗаписьВидеоФайлВодянойЗнак", "watermarkfile"));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", Новый Структура("Р, А", "ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand"));
	Рез.Вставить("ЗаписьВидеоКомандаConvert", Новый Структура("Р, А", "ЗаписьВидеоКомандаConvert", "convertcomand"));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", Новый Структура("Р, А", "ЗаписьВидеоКаталогМузыки", "musicpath"));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Новый Структура("Р, А", "ЗаписьВидеоДелатьНаложениеTTS", "dotts"));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Новый Структура("Р, А", "ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts"));
	Рез.Вставить("ЗаписьВидеоИмяTTS", Новый Структура("Р, А", "ЗаписьВидеоИмяTTS", "ttsvoice"));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗамен", "changewordslib"));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist"));
	Рез.Вставить("ЗаписьВидеоЭкранШирина", Новый Структура("Р, А", "ЗаписьВидеоЭкранШирина", "screenwidth"));
	Рез.Вставить("ЗаписьВидеоЭкранВысота", Новый Структура("Р, А", "ЗаписьВидеоЭкранВысота", "screenheight"));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", Новый Структура("Р, А", "ЗаписьВидеоКоличествоКадров", "fps"));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Новый Структура("Р, А", "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe"));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Новый Структура("Р, А", "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse"));
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", 						Новый Структура("Р, А", "ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf"));	
	Рез.Вставить("ДополнительныеПараметры",								Новый Структура("Р, А", "ДополнительныеПараметры", "dopparams"));	
	Рез.Вставить("КлиентыТестирования",									Новый Структура("Р, А", "КлиентыТестирования", "testclienttable"));	
	Рез.Вставить("ТаймаутЗапуска1С", 									Новый Структура("Р, А", "ТаймаутЗапуска1С", "testclienttimeout"));
	Рез.Вставить("ДиапазонПортовTestclient", 							Новый Структура("Р, А", "ДиапазонПортовTestclient", "testclientports"));
	Рез.Вставить("ОсновнойЯзык", 										Новый Структура("Р, А", "ОсновнойЯзык", "defaultlanguage"));
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Для каждого КлючЗначение Из КоллекцияКоманды Цикл
		Если НРег(КлючЗначение.Значение) = НРег(КомандаЗапускаНРег) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПараметрыПриоритет, Параметры)
	СтруктутраПараметров = Новый Структура;
	Для каждого ключЗначение из ПараметрыЭталон Цикл 
		Значение = Неопределено;
		Если ТипЗнч(ПараметрыПриоритет) = Тип("Соответствие") Тогда 
			Если ПараметрыПриоритет.Получить(ключЗначение.Ключ) <> Неопределено Тогда
				Значение = ПараметрыПриоритет.Получить(ключЗначение.Ключ);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыПриоритет) = Тип("Структура") Тогда 
			ПараметрыПриоритет.Свойство(ключЗначение.Ключ, Значение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда 
			Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда 
				Если Параметры.Получить(ключЗначение.Ключ) <> Неопределено Тогда
					Значение = Параметры.Получить(ключЗначение.Ключ);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда 
				Параметры.Свойство(ключЗначение.Ключ, Значение);
			КонецЕсли;			
		КонецЕсли;    
		
		ключЗначениеЗначение = Неопределено;
		Если Значение <> Неопределено Тогда 
			Если ТипЗнч(ключЗначение.Значение) = Тип("Булево") Тогда 
				Если НРег(Значение) = "истина" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "ложь" Тогда 
					ключЗначениеЗначение = Ложь;
				ИначеЕсли Значение = "1" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли Значение = "0" Тогда
					ключЗначениеЗначение = Ложь;
				ИначеЕсли НРег(Значение) = "true" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "false" Тогда
					ключЗначениеЗначение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Строка") Тогда  
				ключЗначениеЗначение = Строка(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Массив") Тогда
				МассивПараметров = Новый Массив;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда 
					МассивПараметров = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Значение, ",");
				ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
					МассивПараметров = Значение;
				КонецЕсли;
				ключЗначениеЗначение = МассивПараметров;
			КонецЕсли;
		КонецЕсли;
		СтруктутраПараметров.Вставить(ключЗначение.Ключ, ?(ключЗначениеЗначение = Неопределено, ключЗначение.Значение, ключЗначениеЗначение));
	КонецЦикла;
				                
	Возврат СтруктутраПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		
		Если Лев(ПараметрСборки.Значение, 1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, "$workspaceRoot") > 0 ИЛИ Найти(ПараметрСборки.Значение, "$instrumentsRoot") > 0 Тогда 
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		
		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСервер(СтруктураНастроек, ИДОбщегоСохраненияНастроек)
	
	ХранилищеОбщихНастроек.Сохранить(ИДОбщегоСохраненияНастроек, ,СтруктураНастроек);
	
КонецПроцедуры

// } Настройки из файла json, переменных окружения.


// } Helpers

