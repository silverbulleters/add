&НаКлиенте
Перем КонтекстЯдра;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры

// } Plugin interface

// { API

// Загружает глобальноые переменные сохраняемого контекста из внешнего файла
// с именем user_settings.json. Формат файла должен быть следующего вида:
// {
//  "userSettings": [
//    {
//      "user": "USERNAME_1",
//      "settings": {
//        "ИМЯ_ПЕРЕМЕННОЙ_1": "ЗНАЧЕНИЕ_ПЕРЕМЕННОЙ_1",
//        "ИМЯ_ПЕРЕМЕННОЙ_2": "ЗНАЧЕНИЕ_ПЕРЕМЕННОЙ_2",
//      }
//    },
//    {
//      "user": "USERNAME_2",
//      "settings": {
//        "ИМЯ_ПЕРЕМЕННОЙ_1": "ЗНАЧЕНИЕ_ПЕРЕМЕННОЙ_1",
//        "ИМЯ_ПЕРЕМЕННОЙ_2": "ЗНАЧЕНИЕ_ПЕРЕМЕННОЙ_2",
//      }
//    }
//  ]
// }
//
&НаКлиенте
Процедура ЗагрузитьИзФайла() Экспорт
	
	ИмяФайлаНастроек = "user_settings.json";
	
	ФайлСНастройками = Новый Файл(КаталогРепозитория() + "\" + ИмяФайлаНастроек);
	
	ФайлСНастройками = ?(ФайлСНастройками.Существует(), 
		ФайлСНастройками, 
		Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути("$workspaceRoot\" + ИмяФайлаНастроек)));
		
	ФайлСНастройками = ?(ФайлСНастройками.Существует(), 
		ФайлСНастройками, 
		Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути("$instrumentsRoot\" + ИмяФайлаНастроек)));
		
	Если Не ФайлСНастройками.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ТекЮзер = ТекущийПользовательОС();
	
	ЧтениеПеременных = Вычислить("Новый ЧтениеJSON()");
	ЧтениеПеременных.ОткрытьФайл(ФайлСНастройками.ПолноеИмя);
	ГлобальныеПеременные = Вычислить("ПрочитатьJSON(ЧтениеПеременных, Истина)");
	ЧтениеПеременных.Закрыть();
	
	МассивНастроек = ГлобальныеПеременные["userSettings"];
	
	НастройкиЮзераНайдены = Ложь;
	Для каждого СтрокаПользователя Из МассивНастроек Цикл
		Если ВРег(СтрокаПользователя["user"]) = ВРег(ТекЮзер) Тогда 
			НастройкиЮзераНайдены = Истина;
			СтрокаНастроек = СтрокаПользователя["settings"];
			Для каждого ПеремЮзера Из СтрокаНастроек Цикл
				Попытка
					КонтекстЯдра.ОбъектКонтекстСохраняемый.Вставить(ПеремЮзера.Ключ, ПеремЮзера.Значение);
				Исключение
					//значит надо сохранить значение не в структуру а в соответствие
					КонтекстЯдра.СохранитьЗначениеВКонтекстСохраняемый(ПеремЮзера.Ключ, ПеремЮзера.Значение);
				КонецПопытки;
			КонецЦикла;
			ВывестиЗагруженныеНастройкиВЖР(СтрокаНастроек);
		КонецЕсли;
	КонецЦикла;
	
	Если Не НастройкиЮзераНайдены Тогда
		ТекстСообщения = КонтекстЯдра.ПолучитьТекстСообщенияПользователю(
			НСтр("ru = 'Ошибка. Не найдены настройки пользователя %1 в файле %2'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекЮзер);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2", ФайлСНастройками.ПолноеИмя);
		КонтекстЯдра.СделатьСообщение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// } API

// { Helpers

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ТекущийПользовательОС()
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
	
		ПользовательОС = "";
		Попытка
			NetWork = Новый COMObject("wscript.network");
			ПользовательОС = NetWork.Username; 
		Исключение
			Shell = Новый COMОбъект("WScript.Shell");
			ПапкаПользователя = Shell.ExpandEnvironmentStrings("%UserProfile%");
			ИндексРазделителя = СтрНайти(ПапкаПользователя, "\", НаправлениеПоиска.СКонца);
			ПользовательОС = Прав(ПапкаПользователя, СтрДлина(ПапкаПользователя) - ИндексРазделителя);
		КонецПопытки;
		
	Иначе
		Сообщить(НСтр("ru = 'Функция ТекущийПользовательОС() реализована только для Windows'; 
			|en = 'Function for getting current username is implemented only for windows'"));
	КонецЕсли;
	
	Возврат ПользовательОС;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиЗагруженныеНастройкиВЖР(знач НастройкиПользователя)
	
	НастройкиСтрокой = "";
	
	Для каждого СтрокаФайла Из НастройкиПользователя Цикл
		НастройкиСтрокой = НастройкиСтрокой + Символы.ПС + СтрокаФайла.Ключ + " " + СтрокаФайла.Значение;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("VanessaBehavior.ЗагрузкаГлобальныхПеременных", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Загружены глобальные переменные'") + НастройкиСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КаталогРепозитория()
	
	// Предполагаем, что ванесса находился в каталоге tools/add, что-то вроде E:\repository\my_git_repo\tools\add.
	// Тогда нам нужно подняться на два уровня выше. Результат должен быть E:\repository\my_git_repo
	
	ПутьКОбработке = РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	КаталогОбработки = Лев(ПутьКОбработке, СтрНайти(ПутьКОбработке, "\", НаправлениеПоиска.СКонца) - 1);
	КаталогТулзов = Лев(КаталогОбработки, СтрНайти(КаталогОбработки, "\", НаправлениеПоиска.СКонца) - 1);
	КаталогРепо = Лев(КаталогТулзов, СтрНайти(КаталогТулзов, "\", НаправлениеПоиска.СКонца) - 1);
	
	Возврат КаталогРепо;
	
КонецФункции

// } Helpers
