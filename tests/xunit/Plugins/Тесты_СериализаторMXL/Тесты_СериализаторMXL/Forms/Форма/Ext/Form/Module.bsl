&НаКлиенте
Перем ПутьКФайлуПолный Экспорт;// в эту переменную будет установлен правильный клиентский путь к текущему файлу

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ГенераторДанных;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторДанных = КонтекстЯдра.Плагин("СериализаторMXL");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.НачатьГруппу("Проверка создания простого справочника", Истина);
	НаборТестов.Добавить("ТестДолжен_СоздатьПростойСправочник_И_ПолучитьКоллекциюДанных");
	НаборТестов.Добавить("УдалитьСозданныеДанные", , "Удалить созданные данные");
	
	НаборТестов.НачатьГруппу("Проверка создания регистров сведений", Истина);
	НаборТестов.Добавить("ТестДолжен_СоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей");
	НаборТестов.Добавить("УдалитьСозданныеДанные", , "Удалить созданные данные");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_СоздатьПростойСправочник_И_ПолучитьКоллекциюДанных() Экспорт
	ТестовыеДанные = СоздатьДанные("СозданиеПростогоСправочника");
	
	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_СоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей() Экспорт
	ТестовыеДанные = СоздатьДанные("СозданиеДвухНаборовЗаписейВРегистреСведений");

	ДобавитьВКонтекст("ОжидаемоеКоличествоУдаленных", 3);
	
	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура", "ТестовыеДанные");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеДанные() Экспорт
	
	ТестовыеДанные = ПолучитьИзКонтекста("ТестовыеДанные");
	ОжидаемоеКоличествоУдаленных = ПолучитьИзКонтекста("ОжидаемоеКоличествоУдаленных");
	
	КоличествоУдаленных = ГенераторДанных.УдалитьСозданныеДанные(ТестовыеДанные);
	
	Утверждения.ПроверитьРавенство(ОжидаемоеКоличествоУдаленных, КоличествоУдаленных, "ОжидаемоеКоличествоУдаленных, КоличествоУдаленных");
КонецПроцедуры

&НаКлиенте
Функция СоздатьДанные(ИмяМакета)
	Макет = ПолучитьМакетОбработки(ИмяМакета);
	ТестовыеДанные = ГенераторДанных.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Контекст = Новый Структура;
	КонтекстЯдра.СохранитьКонтекст(Контекст);
	ДобавитьВКонтекст("ТестовыеДанные", ТестовыеДанные);
	ДобавитьВКонтекст("ОжидаемоеКоличествоУдаленных", ТестовыеДанные.Количество());
	
	Возврат ТестовыеДанные;
КонецФункции

&НаКлиенте
Процедура ДобавитьВКонтекст(Ключ, Значение)
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	Контекст.Вставить(Ключ, Значение);
	КонтекстЯдра.СохранитьКонтекст(Контекст);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИзКонтекста(Ключ)
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	Возврат Контекст[Ключ];
КонецФункции

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура ПроверитьСозданиеПростогоСправочника(Знач ТестовыеДанные)
	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура", "ТестовыеДанные");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	
КонецПроцедуры