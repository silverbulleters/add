#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;
&НаКлиенте
Перем ПрефиксОбъектов;
&НаКлиенте
Перем ИсключенияИзПроверок;
&НаКлиенте
Перем КонфигурацияПоставщика;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	ПутьНастройки = "Тесты";
	Настройки(КонтекстЯдра, ПутьНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдра) Экспорт
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПрефиксОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонфигурацияПоставщика) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъектовМетаданных = СтруктураОбъектовМетаданных(КонфигурацияПоставщика);
	
	Для Каждого ЭлементСтруктурыОбъектовМетаданных Из СтруктураОбъектовМетаданных Цикл
		Если ЭлементСтруктурыОбъектовМетаданных.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НаборТестов.НачатьГруппу(ЭлементСтруктурыОбъектовМетаданных.Ключ, Ложь);
		Для Каждого ЭлементКоллекции Из ЭлементСтруктурыОбъектовМетаданных.Значение Цикл
			НаборТестов.Добавить(
				"ТестДолжен_ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов", 
				НаборТестов.ПараметрыТеста(ЭлементКоллекции.ПолноеИмя), 
				ЭлементКоллекции.Имя);	
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(мКонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенияИзПроверок = Новый Соответствие;
	ПлагинНастроек = мКонтекстЯдра.Плагин("Настройки");
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
		
	Если Настройки.Свойство("Параметры") И Настройки.Параметры.Свойство("Префикс") Тогда
		ПрефиксОбъектов = ВРег(Настройки.Параметры.Префикс);
	КонецЕсли;
	
	Если Настройки.Свойство(ИмяТеста()) И Настройки[ИмяТеста()].Свойство("ИсключенияИзпроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;
	
	Если Настройки.Свойство("Параметры") И Настройки.Параметры.Свойство("КонфигурацияПоставщика") Тогда
		ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаКонфигурацииПоставщика = Настройки.Параметры.КонфигурацияПоставщика;
	ПутьФайлаКонфигурацииПоставщика = ОбработатьОтносительныйПуть(ПутьФайлаКонфигурацииПоставщика, мКонтекстЯдра);
		
	Файл = Новый Файл(ПутьФайлаКонфигурацииПоставщика);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.ОткрытьФайл(ПутьФайлаКонфигурацииПоставщика);	
	КонфигурацияПоставщика = ПрочитатьJSON(ЧтениеJson);
	ЧтениеJson.Закрыть();
		
	Файл = Неопределено;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки[ИмяТеста()].ИсключенияИзпроверок Цикл
		Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
		КонецЦикла;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов(ПолноеИмяМетаданных) Экспорт
	
	ПропускатьТест = ПропускатьТест(ПолноеИмяМетаданных);
	
	Результат = ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов(ПолноеИмяМетаданных, ПрефиксОбъектов);	
	Если Не Результат И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ПропускатьТест.ТекстСообщения);
	Иначе
		Утверждения.Проверить(Результат, ТекстСообщения(ПолноеИмяМетаданных));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов(ПолноеИмяМетаданных, ПрефиксОбъектов)

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);		
	Результат = (СтрНайти(ВРег(ОбъектМетаданных.Имя), ПрефиксОбъектов) > 0);
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПропускатьТест(ПолноеИмяМетаданных)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ""%1"" исключен из проверки'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция ТекстСообщения(ПолноеИмяМетаданных)

	ШаблонСообщения = НСтр("ru = 'Не задан префикс объекта: %1.'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
	
	Возврат ТекстСообщения;

КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОбъектовМетаданных(КонфигурацияПоставщика)
	
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();
		
	СтруктураОбъектовМетаданных = Новый Структура;
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктурыОбъектовМетаданных Из СтруктураОбъектовМетаданных Цикл
		ОбластьКонфигурацииПоставщика = КонфигурацияПоставщика[ЭлементСтруктурыОбъектовМетаданных.Ключ];
		Для Каждого ОбъектМетаданных Из Метаданные[ЭлементСтруктурыОбъектовМетаданных.Ключ] Цикл
			
			Если ОбластьКонфигурацииПоставщика.Найти(ОбъектМетаданных.Имя) <> Неопределено Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
				Параметры.Вставить("СтруктураОбъектовМетаданных", СтруктураОбъектовМетаданных);
				Параметры.Вставить("ИмяМетаданных", ЭлементСтруктурыОбъектовМетаданных.Ключ);
				Параметры.Вставить("Область", ОбластьКонфигурацииПоставщика);
				
				ОбработатьЭлементыОбъекта(Параметры, "Подсистемы", "Подсистема");
				ОбработатьЭлементыОбъекта(Параметры, "ЗначенияПеречисления", "ЗначениеПеречисления");
				ОбработатьЭлементыОбъекта(Параметры, "Измерения", "Измерение");
				ОбработатьЭлементыОбъекта(Параметры, "Ресурсы", "Ресурс");
				ОбработатьЭлементыОбъекта(Параметры, "Реквизиты", "Реквизит");
				ОбработатьЭлементыОбъекта(Параметры, "РеквизитыАдресации", "РеквизитАдресации");
				ОбработатьЭлементыОбъекта(Параметры, "Перерасчеты", "Перерасчет");
				ОбработатьЭлементыОбъекта(Параметры, "ПризнакиУчета", "ПризнакУчета");
				ОбработатьЭлементыОбъекта(Параметры, "ПризнакиУчетаСубконто", "ПризнакУчетаСубконто");
				ОбработатьКоллекциюОбъекта(Параметры, "ТабличныеЧасти", "ТабличнаяЧасть", "Реквизиты", "Реквизит");
				ОбработатьКоллекциюОбъекта(Параметры, "Операции", "Операция", "Параметры", "Параметр");
				ОбработатьЭлементыОбъекта(Параметры, "Графы", "Граф");
				ОбработатьЭлементыОбъекта(Параметры, "Формы", "Форма");
				ОбработатьЭлементыОбъекта(Параметры, "Команды", "Команда");
				ОбработатьЭлементыОбъекта(Параметры, "Макеты", "Макет");
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ЭлементСтруктурыОбъектовМетаданных.Ключ], 
				ОбъектМетаданных.Имя, 
				ОбъектМетаданных.ПолноеИмя());
				
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураОбъектовМетаданных;

КонецФункции 

&НаСервереБезКонтекста
Процедура ОбработатьКоллекциюОбъекта(Параметры, ИмяНабораКоллекции, ИмяЭлементаНабора, ИмяЭлементов, ИмяЭлемента)

	ОбъектМетаданных = Параметры.ОбъектМетаданных;
	СтруктураОбъектовМетаданных = Параметры.СтруктураОбъектовМетаданных;
	ИмяМетаданных = Параметры.ИмяМетаданных;
	ОбластьКонфигурацииПоставщика = Параметры.Область;
	ШаблонКоллекции = "%1.%2.%3";
	ШаблонЭлементов = "%1.%2.%3.%4.%5";
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, ИмяНабораКоллекции) Тогда
		Возврат;
	КонецЕсли;
	
	СтроковыеУтилиты = СтроковыеУтилиты();
	
	Для Каждого ЭлементНабораКоллекции Из ОбъектМетаданных[ИмяНабораКоллекции] Цикл
		
		ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						ШаблонКоллекции, 
						ОбъектМетаданных.Имя, 
						ИмяНабораКоллекции, 
						ЭлементНабораКоллекции.Имя);
						
		ИмяОбъекта = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						ШаблонКоллекции, 
						ОбъектМетаданных.Имя, 
						ИмяЭлементаНабора, 
						ЭлементНабораКоллекции.Имя);
		
		Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ИмяМетаданных], 
				ИмяОбъекта, 
				ЭлементНабораКоллекции.ПолноеИмя());
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из ЭлементНабораКоллекции[ИмяЭлементов] Цикл
			
			ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонЭлементов, 
							ОбъектМетаданных.Имя, 
							ИмяНабораКоллекции, 
							ЭлементНабораКоллекции.Имя, 
							ИмяЭлементов, 
							ЭлементКоллекции.Имя);
							
			ИмяОбъекта = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонЭлементов, 
							ОбъектМетаданных.Имя, 
							ИмяЭлементаНабора, 
							ЭлементНабораКоллекции.Имя, 
							ИмяЭлемента, 
							ЭлементКоллекции.Имя);
							
			Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
				ДобавитьЭлементКоллекцииОбъектовМетаданных(
					СтруктураОбъектовМетаданных[ИмяМетаданных], 
					ИмяОбъекта, 
					ЭлементКоллекции.ПолноеИмя());
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбработатьЭлементыОбъекта(Параметры, ИмяКоллекции, ИмяЭлемента, ИмяРодителяДляПоиска = "", ИмяРодителя = "")

	ОбъектМетаданных = Параметры.ОбъектМетаданных;
	СтруктураОбъектовМетаданных = Параметры.СтруктураОбъектовМетаданных;
	ИмяМетаданных = Параметры.ИмяМетаданных;
	ОбластьКонфигурацииПоставщика = Параметры.Область;
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, ИмяКоллекции) Тогда
		Возврат;
	КонецЕсли;
	
	СтроковыеУтилиты = СтроковыеУтилиты();
	
	Для Каждого ЭлементКоллекции Из ОбъектМетаданных[ИмяКоллекции] Цикл
		
		мИмяДляПоиска = ?(ЗначениеЗаполнено(ИмяРодителяДляПоиска), ИмяРодителяДляПоиска, ОбъектМетаданных.Имя);
		ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						"%1.%2.%3", 
						мИмяДляПоиска, 
						ИмяКоллекции, 
						ЭлементКоллекции.Имя);
						
		мИмяОбъекта = ?(ЗначениеЗаполнено(ИмяРодителя), ИмяРодителя, ОбъектМетаданных.Имя);
		ИмяОбъекта = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.%2.%3", мИмяОбъекта, ИмяЭлемента, ЭлементКоллекции.Имя);
		
		Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ИмяМетаданных], 
				ИмяОбъекта, 
				ЭлементКоллекции.ПолноеИмя());
		КонецЕсли;
		
		Если Не ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, ИмяКоллекции) Тогда
			мПараметры = Новый Структура;
			мПараметры.Вставить("ОбъектМетаданных", ЭлементКоллекции);
			мПараметры.Вставить("СтруктураОбъектовМетаданных", СтруктураОбъектовМетаданных);
			мПараметры.Вставить("ИмяМетаданных", ИмяМетаданных);
			мПараметры.Вставить("Область", ОбластьКонфигурацииПоставщика);		
			ОбработатьЭлементыОбъекта(мПараметры, ИмяКоллекции, ИмяЭлемента, ИмяДляПоиска, ИмяОбъекта);
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДобавитьЭлементКоллекцииОбъектовМетаданных(Коллекция, Имя, ПолноеИмя)

	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Имя", Имя);
	СтруктураЭлемента.Вставить("ПолноеИмя", ПолноеИмя);
	Коллекция.Добавить(СтруктураЭлемента);

КонецПроцедуры 

&НаКлиенте
Процедура ПоместитьФайлИнтерактивно(Команда)
	
    ОбработкаОкончанияВыбора = Новый ОписаниеОповещения("ОбработкаОкончанияВыбора", ЭтотОбъект);
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "Текстовый документ (txt)|*.txt";
	ВыборФайла.МножественныйВыбор = Ложь;
	
	ВыборФайла.Показать(ОбработкаОкончанияВыбора);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОкончанияВыбора(ВыбранныеФайлы, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда		
		ТекстJSON = ОбработатьФайлКонфигурацииПоставщика(ВыбранныеФайлы[0]);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьФайлКонфигурацииПоставщика(ИмяФайла)

	СтрокаКонфигурацииПоставщика = Новый Массив;
	СтруктураОбъектовМетаданных = Новый Структура;  
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();
	
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);	
	КонецЦикла;
	
	ШаблонПоиска = СтроковыеУтилиты.СтрокаИзМассиваПодстрок(МассивИменОбъектовМетаданных, "|");
	Файл = Новый ЧтениеТекста(ИмяФайла);
	Строка = Файл.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл
		Если СтрНайти(СокрЛП(Строка), "-") Тогда
			Строка = СтрЗаменить(Строка, "- ", "");
			СтрокаКонфигурацииПоставщика.Добавить(СокрЛП(Строка));
		КонецЕсли;
		Строка = Файл.ПрочитатьСтроку();
	КонецЦикла;
	
	Файл.Закрыть();
	
	Для Каждого СтрокаКонфигурацииПоставщика Из СтрокаКонфигурацииПоставщика Цикл
		МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(СтрокаКонфигурацииПоставщика, ".");
		ИмяСвойства = МассивСтрок[0];
		Попытка 
			ЕстьСвойство = СтруктураОбъектовМетаданных.Свойство(ИмяСвойства);
		Исключение
			ЕстьСвойство = Ложь;
		КонецПопытки;
		Если ЕстьСвойство Тогда
			МассивСтрок.Удалить(0);
			НоваяСтрока = СтроковыеУтилиты.СтрокаИзМассиваПодстрок(МассивСтрок, ".");
			СтруктураОбъектовМетаданных[ИмяСвойства].Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(); 
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОбъектовМетаданных);
	
	Возврат ЗаписьJSON.Закрыть();
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменОбъектовМетаданных()

	МассивИменОбъектовМетаданных = Новый Массив;
	                                 
	МассивИменОбъектовМетаданных.Добавить("Подсистемы");    
	МассивИменОбъектовМетаданных.Добавить("ОбщиеМодули");
	МассивИменОбъектовМетаданных.Добавить("ПараметрыСеанса");
	МассивИменОбъектовМетаданных.Добавить("Роли");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеРеквизиты");
	МассивИменОбъектовМетаданных.Добавить("ПланыОбмена");
	МассивИменОбъектовМетаданных.Добавить("КритерииОтбора");
	МассивИменОбъектовМетаданных.Добавить("ПодпискиНаСобытия");
	МассивИменОбъектовМетаданных.Добавить("РегламентныеЗадания");
	МассивИменОбъектовМетаданных.Добавить("ФункциональныеОпции");	
	МассивИменОбъектовМетаданных.Добавить("ПараметрыФункциональныхОпций");
	МассивИменОбъектовМетаданных.Добавить("ОпределяемыеТипы");
	МассивИменОбъектовМетаданных.Добавить("ХранилищаНастроек");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеФормы");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеКоманды");
	МассивИменОбъектовМетаданных.Добавить("ГруппыКоманд");
	МассивИменОбъектовМетаданных.Добавить("Интерфейсы");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеМакеты");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеКартинки");
	МассивИменОбъектовМетаданных.Добавить("ПакетыXDTO");
	МассивИменОбъектовМетаданных.Добавить("WebСервисы");
	МассивИменОбъектовМетаданных.Добавить("HTTPСервисы");  
	МассивИменОбъектовМетаданных.Добавить("WSСсылки");
	МассивИменОбъектовМетаданных.Добавить("ЭлементыСтиля");
	МассивИменОбъектовМетаданных.Добавить("Стили");
	МассивИменОбъектовМетаданных.Добавить("Языки");    
	МассивИменОбъектовМетаданных.Добавить("Константы");
	МассивИменОбъектовМетаданных.Добавить("Справочники");
	МассивИменОбъектовМетаданных.Добавить("Документы");
	МассивИменОбъектовМетаданных.Добавить("ЖурналыДокументов");
	МассивИменОбъектовМетаданных.Добавить("Перечисления");
	МассивИменОбъектовМетаданных.Добавить("Отчеты");
	МассивИменОбъектовМетаданных.Добавить("Обработки");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивИменОбъектовМетаданных.Добавить("ПланыСчетов");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовРасчета");
	МассивИменОбъектовМетаданных.Добавить("РегистрыСведений");
	МассивИменОбъектовМетаданных.Добавить("РегистрыНакопления");
	МассивИменОбъектовМетаданных.Добавить("РегистрыБухгалтерии");
	МассивИменОбъектовМетаданных.Добавить("РегистрыРасчета");
	МассивИменОбъектовМетаданных.Добавить("БизнесПроцессы");
	МассивИменОбъектовМетаданных.Добавить("Задачи");
	МассивИменОбъектовМетаданных.Добавить("ВнешниеИсточникиДанных");
	
	Возврат МассивИменОбъектовМетаданных;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

&НаКлиенте
Функция ОбработатьОтносительныйПуть(Знач ОтносительныйПуть, КонтекстЯдра)

	Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
		ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
								"%1%2", 
								КонтекстЯдра.Объект.КаталогПроекта, 
								Сред(ОтносительныйПуть, 2));
	КонецЕсли;
	
	Результат = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
	Возврат Результат;

КонецФункции 

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

&НаСервере
Функция ИмяТеста()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Истина;
	ПутьНастройки = "Тесты";
	Настройки(КонтекстЯдра, ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Параметры") 
		И Настройки.Параметры.Свойство(ИмяТеста()) Тогда
		ВыполнятьТест = Настройки.Параметры[ИмяТеста()];	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

#КонецОбласти